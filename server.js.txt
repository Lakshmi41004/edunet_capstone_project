// Importing required packages
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
require('dotenv').config();

// Creating an express application
const app = express();

// Middleware
app.use(cors());
app.use(express.json()); // Parse JSON requests

// Connecting to MongoDB
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/expenseManager', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
  .then(() => {
    console.log('MongoDB connected');
  })
  .catch(err => {
    console.error('MongoDB connection error:', err);
  });

// Defining a Schema for Expense
const expenseSchema = new mongoose.Schema({
  name: String,
  amount: Number,
  date: Date,
  category: String,
});

// Creating a Model based on the Schema
const Expense = mongoose.model('Expense', expenseSchema);

// Route to get all expenses
app.get('/api/expenses', async (req, res) => {
  try {
    const expenses = await Expense.find();
    res.json(expenses);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// Route to create a new expense
app.post('/api/expenses', async (req, res) => {
  const expense = new Expense({
    name: req.body.name,
    amount: req.body.amount,
    date: req.body.date,
    category: req.body.category,
  });

  try {
    const newExpense = await expense.save();
    res.status(201).json(newExpense);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
});

// Starting the server
const port = process.env.PORT || 5000;
app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
